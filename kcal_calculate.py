import textwrap
import streamlit as st
import matplotlib.pyplot as plt

metrics_age_types=["–≤ –≥–æ–¥–∞—Ö","–≤ –º–µ—Å–µ—Ü–∞—Ö"]
gender_types=["–°–∞–º–µ—Ü", "–°–∞–º–∫–∞"]
rep_status_types=["–ù–µ –±–µ—Ä–µ–º–µ–Ω–Ω–∞—è", "–ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è", "–ü–µ—Ä–∏–æ–¥ –ª–∞–∫—Ç–∞—Ü–∏–∏"]
berem_time_types=["–ø–µ—Ä–≤—ã–µ 4 –Ω–µ–¥–µ–¥–µ–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏","–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ–¥–µ–ª—å –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏"]
lact_time_types=["1 –Ω–µ–¥–µ–ª—è","2 –Ω–µ–¥–µ–ª—è","3 –Ω–µ–¥–µ–ª—è","4 –Ω–µ–¥–µ–ª—è"]
age_category_types=["–©–µ–Ω–∫–∏","–í–∑—Ä–æ—Å–ª—ã–µ","–ü–æ–∂–∏–ª—ã–µ"]
size_types=["–ú–µ–ª–∫–∏–µ",  "–°—Ä–µ–¥–Ω–∏–µ",  "–ö—Ä—É–ø–Ω—ã–µ", "–û—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–µ"]
activity_level_cat_1 = ["–ü–∞—Å—Å–∏–≤–Ω—ã–π (–≥—É–ª—è–µ–µ—Ç –Ω–∞ –ø–æ–≤–æ–¥–∫–µ –º–µ–Ω–µ–µ 1—á/–¥–µ–Ω—å)", "–°—Ä–µ–¥–Ω–∏–π1 (1-3—á/–¥–µ–Ω—å, –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)",
                          "–°—Ä–µ–¥–Ω–∏–π2 (1-3—á/–¥–µ–Ω—å, –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)", "–ê–∫—Ç–∏–≤–Ω—ã–π (3-6—á/–¥–µ–Ω—å, —Ä–∞–±–æ—á–∏–µ —Å–æ–±–∞–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≤—á–∞—Ä–∫–∏)",
                          "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (–≥–æ–Ω–∫–∏ –Ω–∞ —Å–æ–±–∞—á—å–∏—Ö —É–ø—Ä—è–∂–∫–∞—Ö —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 168 –∫–º/–¥–µ–Ω—å –≤ —É—Å–ª–æ–≤–∏—è—Ö —Å–∏–ª—å–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–∞)",
                          "–í–∑—Ä–æ—Å–ª—ã–µ, —Å–∫–ª–æ–Ω–Ω—ã–µ –∫ –æ–∂–∏—Ä–µ–Ω–∏—é"]
activity_level_cat_2 = ["–ü–∞—Å—Å–∏–≤–Ω—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–ê–∫—Ç–∏–≤–Ω—ã–π"]
other_nutrients_1=["–ó–æ–ª–∞, –≥","–ö–ª–µ—Ç—á–∞—Ç–∫–∞, –≥","–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω, –º–≥","–°–∞—Ö–∞—Ä –æ–±—â–µ–µ, –≥"]
other_nutrients_2 = ["–•–æ–ª–∏–Ω, –º–≥","–°–µ–ª–µ–Ω, –º–∫–≥","–ü–∞–Ω—Ç–æ—Ç–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –º–≥","–õ–∏–Ω–æ–ª–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –≥","–§–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –º–∫–≥","–ê–ª—å—Ñ–∞-–ª–∏–Ω–æ–ª–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –≥","–ê—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –≥","–≠–ü–ö (50-60%) + –î–ì–ö (40-50%), –≥"]
other_nutrients=other_nutrients_1+other_nutrients_2

major_minerals=["–ö–∞–ª—å—Ü–∏–π, –º–≥","–ú–µ–¥—å, –º–≥","–ñ–µ–ª–µ–∑–æ, –º–≥","–ú–∞–≥–Ω–∏–π, –º–≥","–§–æ—Å—Ñ–æ—Ä, –º–≥","–ö–∞–ª–∏–π, –º–≥",
                "–ù–∞—Ç—Ä–∏–π, –º–≥","–¶–∏–Ω–∫, –º–≥", "–ú–∞—Ä–≥–∞–Ω–µ—Ü, –º–≥"]

vitamins=[ "–í–∏—Ç–∞–º–∏–Ω A, –º–∫–≥","–í–∏—Ç–∞–º–∏–Ω E, –º–≥","–í–∏—Ç–∞–º–∏–Ω –î, –º–∫–≥","–í–∏—Ç–∞–º–∏–Ω –í1 (—Ç–∏–∞–º–∏–Ω), –º–≥","–í–∏—Ç–∞–º–∏–Ω –í2 (–†–∏–±–æ—Ñ–ª–∞–≤–∏–Ω), –º–≥","–í–∏—Ç–∞–º–∏–Ω –í3 (–ù–∏–∞—Ü–∏–Ω), –º–≥","–í–∏—Ç–∞–º–∏–Ω –í6, –º–≥","–í–∏—Ç–∞–º–∏–Ω –í12, –º–∫–≥"]


def protein_need_calc(kkal, age_type_categ,  w, reproductive_status, age, age_mesuare_type):
   if age_type_categ==age_category_types[0]:
     if age_mesuare_type==metrics_age_types[1] and age<=3:
         return 56.3*kkal/1000
     else: 
         return 43.8*kkal/1000
   elif reproductive_status==rep_status_types[1] or reproductive_status==rep_status_types[2]:
      return 50*kkal/1000
   else:
      return 3.28*(w**0.75)


def show_nutr_content(count_nutr_cont_all, other_nutrient_norms):
                                  for i in range(0, len(other_nutrients_1), 2):
                                      cols = st.columns(2)
                                      for j, col in enumerate(cols):
                                          if i + j < len(other_nutrients_1):
                                              nutris = (other_nutrients_1)[i + j]
                                              nutr_text=nutris.replace("Major Minerals.","").split(", ")
                                              emg=""
                                              if len(nutr_text)>1:
                                                emg=nutr_text[-1]
                                              else:
                                                emg="g"
                                              with col:
                                                  st.markdown(f"**{nutr_text[0]}**: {count_nutr_cont_all.get(nutris, '')} {emg}")

                                  coli, colii=st.columns([6,3])
                                  with coli:
                                     for i in range(0, len(other_nutrients_2)):
                                              nutris = other_nutrients_2[i]
                                              nutr_text=nutris.replace("Major Minerals.","").split(", ")
                                              emg = nutr_text[-1] if len(nutr_text)>1 else "g"
                                              if nutr_text[0] in other_nutrient_norms:
                                                norma = other_nutrient_norms[nutr_text[0]]
                                                st.pyplot(bar_print(norma, count_nutr_cont_all.get(nutris, ''), nutr_text[0]+", "+ emg, str(emg)))
                               
                                  
                                  st.markdown("#### ü™® –ú–∏–Ω–µ—Ä–∞–ª—ã")
                                  coli, colii=st.columns([6,3])
                                  with coli:
                                     for i in range(0, len(major_minerals)):
                                              nutris = major_minerals[i]
                                              nutr_text=nutris.replace("Major Minerals.","").split(", ")
                                              emg = nutr_text[-1] if len(nutr_text)>1 else "g"
                                              norma = other_nutrient_norms[nutr_text[0]]
                                              st.pyplot(bar_print(norma, count_nutr_cont_all.get(nutris, ''), nutr_text[0]+", "+ emg, str(emg)))
                                                  
                                  st.markdown("#### üçä –í–∏—Ç–∞–º–∏–Ω—ã")
                                  coli, colii=st.columns([6,3])
                                  with coli:
                                     for i in range(0, len(vitamins)):
                                              nutris = vitamins[i]
                                              nutr_text=nutris.replace("Major Minerals.","").split(", ")
                                              emg = nutr_text[-1] if len(nutr_text)>1 else "g"
                                              norma = other_nutrient_norms[nutr_text[0]]
                                              st.pyplot(bar_print(norma, count_nutr_cont_all.get(nutris, ''), nutr_text[0]+", "+ emg, str(emg)))

                                  st.markdown("### –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å")
                                  for name,amount in count_nutr_cont_all.items():
                                    name_n=name.split(", ")[0]
                                    emg=name.split(", ")[-1]
                                    if name_n in other_nutrient_norms:
                                      diff=other_nutrient_norms[name_n] - amount
                                      if diff>0:
                                         st.write(f"**{name_n}:** {round(diff,1)} {emg}")


def get_other_nutrient_norms(kkal, age_type_categ,  w, reproductive_status):
   if age_type_categ==age_category_types[0]:
         nutrients_per_1000_kcal = {
              "–ö–∞–ª—å—Ü–∏–π": 3000*kkal/1000,
              "–§–æ—Å—Ñ–æ—Ä": 2500*kkal/1000,
              "–ú–∞–≥–Ω–∏–π": 100*kkal/1000,
              "–ù–∞—Ç—Ä–∏–π": 550*kkal/1000,
              "–ö–∞–ª–∏–π": 1100*kkal/1000,
              "–ñ–µ–ª–µ–∑–æ": 22*kkal/1000,
              "–ú–µ–¥—å": 2.7*kkal/1000,
              "–¶–∏–Ω–∫": 25*kkal/1000,
              "–ú–∞—Ä–≥–∞–Ω–µ—Ü": 1.4*kkal/1000,

              "–í–∏—Ç–∞–º–∏–Ω A": 378.9*kkal/1000,
              "–í–∏—Ç–∞–º–∏–Ω –î": 3.4*kkal/1000,
              "–í–∏—Ç–∞–º–∏–Ω E": 7.5*kkal/1000,
              "–í–∏—Ç–∞–º–∏–Ω –í1 (—Ç–∏–∞–º–∏–Ω)": 0.34*kkal/1000,
              "–í–∏—Ç–∞–º–∏–Ω –í2 (–†–∏–±–æ—Ñ–ª–∞–≤–∏–Ω)": 1.32*kkal/1000,
              "–í–∏—Ç–∞–º–∏–Ω –í3 (–ù–∏–∞—Ü–∏–Ω)": 4.25*kkal/1000,
              "–í–∏—Ç–∞–º–∏–Ω –í6": 0.375*kkal/1000,
              "–í–∏—Ç–∞–º–∏–Ω –í12": 8.75*kkal/1000,
                         
              "–°–µ–ª–µ–Ω": 87.5*kkal/1000,
              "–•–æ–ª–∏–Ω": 425*kkal/1000,
              "–ü–∞–Ω—Ç–æ—Ç–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 3.75*kkal/1000,
              "–õ–∏–Ω–æ–ª–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 3.3*kkal/1000,
              "–§–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 68*kkal/1000,
              "–ê–ª—å—Ñ–∞-–ª–∏–Ω–æ–ª–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 0.2*kkal/1000,
              "–ê—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 0.08*kkal/1000,
              "–≠–ü–ö (50-60%) + –î–ì–ö (40-50%)": 0.13*kkal/1000,
           
              "–ô–æ–¥ (–º–∫–≥)": 220*kkal/1000,
              "–ë–∏–æ—Ç–∏–Ω (–º–∫–≥)": 4*kkal/1000
             }

         return nutrients_per_1000_kcal
     
   elif reproductive_status==rep_status_types[1] or reproductive_status==rep_status_types[2]:
         nutrients_per_1000_kcal = {
          "–ö–∞–ª—å—Ü–∏–π": 1900*kkal/1000,
          "–§–æ—Å—Ñ–æ—Ä": 1200*kkal/1000,
          "–ú–∞–≥–Ω–∏–π": 150*kkal/1000,
          "–ù–∞—Ç—Ä–∏–π": 500*kkal/1000,
          "–ö–∞–ª–∏–π": 900*kkal/1000,
          "–ñ–µ–ª–µ–∑–æ": 17*kkal/1000,
          "–ú–µ–¥—å": 3.1*kkal/1000,
          "–¶–∏–Ω–∫": 24*kkal/1000,
          "–ú–∞—Ä–≥–∞–Ω–µ—Ü": 1.8*kkal/1000,
 
          "–í–∏—Ç–∞–º–∏–Ω A": 378.9*kkal/1000,
          "–í–∏—Ç–∞–º–∏–Ω –î": 3.4*kkal/1000,
          "–í–∏—Ç–∞–º–∏–Ω E": 7.5*kkal/1000,
          "–í–∏—Ç–∞–º–∏–Ω –í1 (—Ç–∏–∞–º–∏–Ω)": 0.56*kkal/1000,
          "–í–∏—Ç–∞–º–∏–Ω –í2 (–†–∏–±–æ—Ñ–ª–∞–≤–∏–Ω)": 1.3*kkal/1000,
          "–í–∏—Ç–∞–º–∏–Ω –í3 (–ù–∏–∞—Ü–∏–Ω)": 4.25*kkal/1000,
          "–í–∏—Ç–∞–º–∏–Ω –í6": 0.375*kkal/1000,
          "–í–∏—Ç–∞–º–∏–Ω –í12": 8.75*kkal/1000,
                 
          "–°–µ–ª–µ–Ω": 87.5*kkal/1000,
          "–•–æ–ª–∏–Ω": 425*kkal/1000,
          "–ü–∞–Ω—Ç–æ—Ç–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 3.75*kkal/1000,
          "–§–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 67.5*kkal/1000,
          "–ë–∏–æ—Ç–∏–Ω": 4*kkal/1000,
          "–õ–∏–Ω–æ–ª–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 3.3*kkal/1000,
          "–ê–ª—å—Ñ–∞-–ª–∏–Ω–æ–ª–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 0.2*kkal/1000,
          "–≠–ü–ö (50-60%) + –î–ì–ö (40-50%)": 0.13*kkal/1000,
         
          "–ô–æ–¥": 220*kkal/1000,
          "–ë–∏–æ—Ç–∏–Ω": 4*kkal/1000
         }
         return nutrients_per_1000_kcal

   else:  
      other_for_adult = {
          "–ö–∞–ª—å—Ü–∏–π": 130*(w**0.75),
          "–§–æ—Å—Ñ–æ—Ä": 100*(w**0.75),
          "–ú–∞–≥–Ω–∏–π": 19.7*(w**0.75),
          "–ù–∞—Ç—Ä–∏–π": 26.2*(w**0.75),
          "–ö–∞–ª–∏–π": 140*(w**0.75),
          "–ñ–µ–ª–µ–∑–æ": 1.0*(w**0.75),
          "–ú–µ–¥—å": 0.2*(w**0.75),
          "–¶–∏–Ω–∫": 2.0*(w**0.75),
          "–ú–∞—Ä–≥–∞–Ω–µ—Ü": 0.16*(w**0.75),
          
          "–í–∏—Ç–∞–º–∏–Ω A": 4.175*(w**0.75),
          "–í–∏—Ç–∞–º–∏–Ω –î": 0.45*(w**0.75),
          "–í–∏—Ç–∞–º–∏–Ω E": 1.0*(w**0.75),
          "–í–∏—Ç–∞–º–∏–Ω –í1 (—Ç–∏–∞–º–∏–Ω)": 0.074*(w**0.75),
          "–í–∏—Ç–∞–º–∏–Ω –í2 (–†–∏–±–æ—Ñ–ª–∞–≤–∏–Ω)": 0.171*(w**0.75),
          "–í–∏—Ç–∞–º–∏–Ω –í3 (–ù–∏–∞—Ü–∏–Ω)": 0.57*(w**0.75),
          "–í–∏—Ç–∞–º–∏–Ω –í6": 0.049*(w**0.75),
          "–í–∏—Ç–∞–º–∏–Ω –í12": 1.15*(w**0.75),
        
          "–°–µ–ª–µ–Ω": 11.8*(w**0.75),
          "–ü–∞–Ω—Ç–æ—Ç–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 0.49*(w**0.75),
          "–§–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 8.9*(w**0.75),
          "–•–æ–ª–∏–Ω": 56*(w**0.75),
          "–õ–∏–Ω–æ–ª–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 0.36*(w**0.75),
          "–ê–ª—å—Ñ–∞-–ª–∏–Ω–æ–ª–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞": 0.014*(w**0.75),
          "–≠–ü–ö (50-60%) + –î–ì–ö (40-50%)": 0.03*(w**0.75)
       }
      return other_for_adult



nutrients_per_kg = {
    "–í–∏—Ç–∞–º–∏–Ω –ê (–ú–ï/–∫–≥)": 34000,
    "–í–∏—Ç–∞–º–∏–Ω D3 (–ú–ï/–∫–≥)": 1100,
    "–í–∏—Ç–∞–º–∏–Ω –ï (–ú–ï/–∫–≥)": 350,
    "–ñ–µ–ª–µ–∑–æ (–º–≥/–∫–≥)": 120,
    "–ô–æ–¥ (–º–≥/–∫–≥)": 1.9,
    "–ú–µ–¥—å (–º–≥/–∫–≥)": 13,
    "–ú–∞—Ä–≥–∞–Ω–µ—Ü (–º–≥/–∫–≥)": 46,
    "–¶–∏–Ω–∫ (–º–≥/–∫–≥)": 110,
    "–°–µ–ª–µ–Ω (–º–≥/–∫–≥)": 0.13
}





def bar_print(total_norm,current_value,name_ing,mg):
                                        maxi_dat = total_norm if total_norm>current_value else current_value
                                        norma = 100 if maxi_dat== total_norm else (total_norm/current_value)*100
                                        curr =  100 if maxi_dat== current_value else (current_value/total_norm)*100
  
                                        maxi_lin = 100*1.2
                                        diff = current_value - total_norm
                                        fig, ax = plt.subplots(figsize=(5, 1))
                                        ax.axis('off')
                                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å 20% —Å–ø—Ä–∞–≤–∞ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ—Å–∏ X
                                        ax.set_xlim(-60, maxi_lin+8)
                                        ax.set_ylim(-0.5, 0.5)
                                        ax.plot([0, maxi_lin], [0, 0], color='#e0e0e0', linewidth=10, solid_capstyle='round', alpha=0.8)
                                        fixed_space = -10 
                                        wrapped_text = "\n".join(textwrap.wrap(name_ing, width=15))
                                        ax.text(fixed_space, 0, wrapped_text, ha='right', va='center', fontsize=13)
                                        if current_value < total_norm:
                                            ax.plot([0, norma], [0, 0], color='green', linewidth=10, solid_capstyle='round')
                                            ax.plot([0, curr], [0, 0], color='purple', linewidth=10, solid_capstyle='round')
                                        else:
                                            ax.plot([0, curr], [0, 0], color='darkgray', linewidth=10, solid_capstyle='round')
                                            ax.plot([0, norma], [0, 0], color='green', linewidth=10, solid_capstyle='round')
                                        ax.text(maxi_lin+10, 0,
                                                f"{'–î–µ—Ñ–∏—Ü–∏—Ç' if diff < 0 else '–ò–∑–±—ã—Ç–æ–∫'}: {round(abs(diff),2)} {mg}",
                                                ha='left', va='center', fontsize=13, color='black')
                                        ax.text(curr, 0.2, f"–¢–µ–∫—É—â–µ–µ\n{round(current_value,2)}", color='purple', ha='center', va='bottom', fontsize=9)
                                        ax.text(norma, -0.2,  f"–ù–æ—Ä–º–∞\n{round(total_norm,2)}", color='green', ha='center', va='top', fontsize=9)
                                        return fig

def size_category(w):
    if w <= 10:
        return size_types[0]
    elif w <= 25:
        return size_types[1]
    elif w <= 40:
        return size_types[2]
    else:
        return size_types[3]

def age_type_category(size_categ, age ,age_metric):
        if age_metric==metrics_age_types[0]:
            age=age*12
            
        if size_categ==size_types[0]:
          if age>=1*12 and age<=8*12:    
             return age_category_types[1]
          elif age<1*12:    
             return age_category_types[0]
          elif age>8*12:  
             return age_category_types[2]
       
        elif size_categ==size_types[2]:
          if age>=15 and age<=7*12  :   
              return age_category_types[1]
          elif age<15:     
             return age_category_types[0]
          elif age>7*12:    
             return age_category_types[2]
              
        elif size_categ==size_types[3]:
          if age<=6*12 and age>=24:    
              return age_category_types[1]
          elif age<24:    
              return age_category_types[0]
          elif age>6*12:   
              return age_category_types[2]
              
        else:  
          if age<=7*12:
                return age_category_types[1]
          elif age<12:     
             return age_category_types[0]
          elif age>7*12:    
            return age_category_types[2]
            
def kcal_calculate(reproductive_status, berem_time, num_pup, L_time, age_type, weight, expected, activity_level, user_breed, age):
    formula=""
    page=""
    if L_time==lact_time_types[0]:
      L=0.75
    elif L_time==lact_time_types[1]:
      L=0.95
    elif L_time==lact_time_types[2]:
      L=1.1
    else :
      L=1.2
    
    if reproductive_status==rep_status_types[1]:
      if berem_time==berem_time_types[0]:
        kcal=132*(weight**0.75)
        formula= r"kcal = 132 \cdot –≤–µ—Å^{0.75}  \\  \text{(–ø–µ—Ä–≤—ã–µ 4 –Ω–µ–¥–µ–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏)}"
        page = "56"
        
      else:
        kcal=132*(weight**0.75) + (26*weight)
        formula= r"kcal = 132 \cdot –≤–µ—Å^{0.75} + 26 \cdot –≤–µ—Å  \\  \text{(–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ–¥–µ–ª—å –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏)}"
        page = "56"
  
    elif reproductive_status==rep_status_types[2]:
       if num_pup<5:
         kcal=145*(weight**0.75) + 24*num_pup*weight*L
         formula = fr"kcal = 145 \cdot –≤–µ—Å^{{0.75}} + 24 \cdot n \cdot –≤–µ—Å \cdot L  \\  \text{{n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —â–µ–Ω–∫–æ–≤}}  \\  \text{{L = {L} –¥–ª—è {L_time}}}"
         page = "56"
         
       else:
         kcal=145*(weight**0.75) + (96+12*num_pup-4)*weight*L
         formula = fr"kcal = 145 \cdot –≤–µ—Å^{{0.75}}  + (96 + 12 \cdot n - 4) \cdot –≤–µ—Å \cdot L    \\  \text{{n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —â–µ–Ω–∫–æ–≤}}  \\  \text{{L = {L} –¥–ª—è {L_time}}}"       
         page = "56"
         
    else:
      if age_type==age_category_types[0]:
          if age<8:
            kcal=25 * weight 
            formula= r"kcal = 25 \cdot –≤–µ—Å"
            page = "56"
            
          elif age>=8 and age <12:
            kcal=(254.1-135*(weight/expected) )*(weight**0.75)
            formula=fr"kcal = \left(254.1 - 135 \cdot \frac{{–≤–µ—Å}}{{w}}\right) \cdot –≤–µ—Å^{{0.75}}  \\  w = {round(expected,2)}  \text{{–∫–≥ ;  –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è –ø–æ—Ä–æ–¥—ã {user_breed}}}"
            page = "56"

        
          else :
            kcal=130*(weight**0.75)
            formula= r"kcal = 130 \cdot –≤–µ—Å^{0.75}"
            page = "54"


      
      elif age_type==age_category_types[2]:
          if activity_level==activity_level_cat_2[0]:
              kcal=80*(weight**0.75)
              formula= r"kcal = 80  \cdot –≤–µ—Å^{0.75}"
              page = "54"
        
          elif activity_level==activity_level_cat_2[1]:
              kcal=95*(weight**0.75)
              formula= r"kcal = 95  \cdot –≤–µ—Å^{0.75}"
              page = "54"    
            
          else:
             kcal=110*(weight**0.75)
             formula= r"kcal = 110  \cdot –≤–µ—Å^{0.75}"
             page = "54"
            
      else:   
            if activity_level==activity_level_cat_1[0]:
              kcal=95*(weight**0.75)
              formula= r"kcal = 95  \cdot –≤–µ—Å^{0.75}"
              page = "55"
        
            elif activity_level==activity_level_cat_1[1]:
              kcal=110*(weight**0.75)
              formula= r"kcal = 110  \cdot –≤–µ—Å^{0.75}"
              page = "55"
        
            elif activity_level==activity_level_cat_1[2]:
              kcal=125*(weight**0.75)
              formula= r"kcal = 125  \cdot –≤–µ—Å^{0.75}"
              page = "55"
        
            elif activity_level==activity_level_cat_1[3]:
              kcal=160*(weight**0.75)
              formula= r"kcal = 160  \cdot –≤–µ—Å^{0.75}"
              page = "55"
              
            elif activity_level==activity_level_cat_1[4]:
              kcal=860*(weight**0.75)
              formula= r"kcal = 860  \cdot –≤–µ—Å^{0.75}"
              page = "55"
           
            else:
              kcal=90*(weight**0.75)
              formula= r"kcal = 90  \cdot –≤–µ—Å^{0.75}"
              page = "55"
              
    return kcal, formula, page
